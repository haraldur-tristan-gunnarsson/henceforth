." >>>>>>>>>>>>>>>>>>>>>>>>Hello, world!<<<<<<<<<<<<<<<<<<<" NL NL

." Note that HERE is: " HERE 0x. NL NL

deletion_mark hello_mark
,nh" This text is stored semi-permanently, subject to a deletion_mark" n.
." The deletion_mark is called hello_mark." NL NL

." There is a procedure called test_proc." NL
,nh" This text is used in test_proc." : test_proc [LITERAL] ~ n. ;
." Calling test_proc..." NL test_proc NL

." Here is the list of all procedures (words) via WORDS:" NL WORDS NL
\ IDEBUG

." HERE is currently: " HERE 0x. NL

\ IDEBUG

." Now using deletion_mark hello_mark." NL hello_mark
." Now HERE is: " HERE 0x.
." And there are fewer WORDS:" NL WORDS NL NL

message"
 *** 
 * * 
 *** " box
." here is a box:" NL box NL

message"
  *  
 *** 
*****" triangle
." here is a triangle:" NL triangle NL

: house [ triangle box ] ;
." here is a house:" NL house NL

deletion_mark fizzbuzz_marker

\ local variables would be very nice for this! (base pointer needed?)
\ just having a base pointer, without variable names, would be useful...
\ perhaps, a separate stack just to manage such things? optional
\ maybe have a temporary "alias" dictionary as well, to give meaningful names for local variables -- this could be coded within this language!
: fizzbuzz	( n -- )	[ 0 ] loop{ [ 1+ 2DUP >= ] ( n c p )
				}loopd{ [ -1 >r ] ( n c )
					[ DUP 3 % NOT ] ifd{
						~." Fizz" [ RDROP 0 >r ]
					}if
					[ DUP 5 % NOT ] ifd{
						~." Buzz" [ RDROP 0 >r ]
					}if
					~ r> ifd{ [ DUP (.) ] }if ~ NL
				}loop [ DROP DROP ] ;

." commencing fizzbuzz to 15:" NL 15 fizzbuzz NL

." Behold the deletion_mark for fizzbuzz (fizzbuzz_marker):" NL
see fizzbuzz_marker NL
fizzbuzz_marker

: fizz		( n -- bool )		[ 3 % NOT ] if{	~." Fizz" }if ;
: buzz		( n -- bool )		[ 5 % NOT ] if{	~." Buzz" }if ;
: fizzbuzz	( n -- )	[ 0 ] loop{ [ 1+ 2DUP >= ] ( n c p )
				}loopd{ [ 0 ] ( n c p )
					[ >r DUP fizz r> BOR ]
					[ >r DUP buzz r> BOR ]
					[ NOT ] ifd{ [ DUP (.) ] }if ~ NL
				}loop [ DROP DROP ] ;

." commencing a different fizzbuzz to 15:" NL 15 fizzbuzz NL

: fizzbuzz	( n -- )	[ 0 ] loop{ [ 1+ 2DUP >= ] ( n c p )
				}loopd{ [ 0 ] ( n c p )
					[ OVER fizz BOR ]
					[ OVER buzz BOR ]
					[ NOT ] ifd{ [ DUP (.) ] }if ~ NL
				}loop [ DROP DROP ] ;

." commencing another different fizzbuzz to 15:" NL 15 fizzbuzz NL
